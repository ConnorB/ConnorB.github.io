{
  "hash": "46898d62e2bb0b04fd4028b64dd63449",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intro to R, Using R and RStudio\"\nsubtitle: \"Field Ecology\"\ndate: 10/06/2025\ndate-format: \"MMM D, YYYY\"\nauthor: \"Connor Brown\"\nformat:\n  revealjs:\n    theme: ku.scss\n    logo: https://logos-world.net/wp-content/uploads/2023/12/Kansas-Jayhawks-Logo-1912.png\nexecute:\n  fig-width: 6\n  fig-height: 4\nembed-resources: true\nself_contained: true\npage-layout: full\ncode-line-numbers: false\ncode-link: true\nfontsize: 1.6em\neditor: visual\n---\n\n\n\n## What is R? {auto-animate=\"true\"}\n\n-   R is an open-source software environment for statistical computing and graphics, popular among ecologist and data scientist.\n\n-   There's almost nothing you can't do with R and RStudio![^1]\n\n-   Since R does not have a graphical user interface (GUI) for point-and-click interactions like Excel or SPSS, most people use an Integrated Development Environment (IDE) called RStudio.\n\n    -   RStudio provides a consistent way to organize files, access information quickly, and display data.\n\n[^1]: This presentation was created in RStudio!\n\n## R in your Browser - Posit Cloud\n\n<https://posit.cloud/>\n\n::: r-stack\n![](images/Get_Started.png){fig-align=\"center\"}\n\n![](images/FreeAccount.png){.fragment fig-align=\"center\"}\n:::\n\n## Create A New Project\n\n![](images/NewProject.png)\n\n## Name Your Project\n\n![](images/NameProject.png)\n\n## What Are We Looking At? {.scrollable .nostretch}\n\n![](images/NewView.png)\n\n**Console panel**\n\n:   -   The Console is where the output and conflicts and errors within your code are listed. You can also run individual lines of code in the Console if you want to test code variations or options before incorporating into your script and running the entire chunk.\n\n**Environment panel**\n\n:   -   The Environment displays your current R objects, variable values, custom functions, and previously executed commands in the “History” tab.\n\n**Files, Plots, Help**\n\n:   -   The Files panel displays files, plots, the library of R packages that are installed, and R Help resources.\n\n## Open a File For Code {auto-animate=\"true\"}\n\nBefore you start writing code, you need to open an R Script file, this is where you'll be able to save code for later.\n\n![](images/NewFile.png)\n\n## New File {.scrollable .nostretch}\n\n![](images/NewFileView.png)\n\n**Script panel**\n\n:   -   This is where you input and run your code. Your graphics display below the chunk of code inside the panel.\n\n**Console panel**\n\n:   -   The Console is where the output and conflicts and errors within your code are listed. You can also run individual lines of code in the Console if you want to test code variations or options before incorporating into your script and running the entire chunk.\n\n**Environment panel**\n\n:   -   The Environment displays your current R objects, variable values, custom functions, and previously executed commands in the “History” tab.\n\n**Files, Plots, Help**\n\n:   -   The Files panel displays files, plots, the library of R packages that are installed, and R Help resources.\n\n## Functions and Packages {auto-animate=\"true\"}\n\n-   A **function** is a reusable piece of code that performs a task.\n\n-   Functions often take **inputs** (called *arguments* or *parameters*) and return an **output**.\n\n    -   For example:\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        sqrt(x = 16)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n        [1] 4\n        ```\n        \n        \n        :::\n        :::\n\n\n    -   Here, `sqrt()` is the function, `16` is the argument, and the output is `4`.\n\n-   You can think of a function like a math function:\n\n    -   In math: $y = f(x)$\n\n    -   In R: `f(x)`\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        log(x = 100)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n        [1] 4.60517\n        ```\n        \n        \n        :::\n        :::\n\n\n    -   The function `log()` takes `100` as input and returns its logarithm.\n\n## Functions and Packages {auto-animate=\"true\"}\n\n-   **Packages** are collections of functions, data, and documentation bundled together\n\n-   They extend R so you can do tasks like data wrangling, visualization, or machine learning.\n\n-   R comes with a set of base packages, but thousands of additional packages are available through repositories like [CRAN](https://cran.r-project.org/web/packages/available_packages_by_name.html \"The Comprehensive R Archive Network: official source for R packages\") and [GitHub](https://github.com/ \"A platform for sharing and collaborating on code and R packages\").\n\n-   Examples of popular packages:\n\n    -   [`dplyr`](https://dplyr.tidyverse.org/ \"Click for More Info on dplyr\") for data wrangling\n\n    -   [`ggplot2`](https://ggplot2.tidyverse.org/ \"Click for More Info on ggplot2\") for visualization\n\n    -   [`caret`](https://topepo.github.io/caret/ \"Click for More Info on caret\") for machine learning\n\n## Install Packages {auto-animate=\"true\"}\n\nTo install a package, type the following commands in the **Console** at the bottom of RStudio and press **Enter** after each one:\n\n``` r\ninstall.packages(\"readr\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n```\n\n[<small>Or navigate to Tools \\> Install Packages ... and type the packages you want to install</small>]{.fragment}\n\n## Install Packages {auto-animate=\"true\"}\n\nTo install a package, type the following commands in the **Console** at the bottom of RStudio and press **Enter** after each one:\n\n``` r\ninstall.packages(\"readr\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n```\n\n<small>Or navigate to Tools \\> Install Packages ... and type the packages you want to install</small>\n\nThis will download and install:\n\n-   [`readr`](https://readr.tidyverse.org/ \"Click for More Info on readr\") for reading files\n-   [`dplyr`](https://dplyr.tidyverse.org/ \"Click for More Info on dplyr\") for data manipulation\n-   and [`ggplot2`](https://ggplot2.tidyverse.org/ \"Click for More Info on ggplot2\") for plotting\n\n<div style=\"position: absolute; bottom: 9em; right: 10em;\">\n  <img src=\"https://www.tidyverse.org/css/images/hex/readr.png\" width=\"100\">\n  <img src=\"https://www.tidyverse.org/css/images/hex/dplyr.png\" width=\"100\">\n  <img src=\"https://www.tidyverse.org/css/images/hex/ggplot2.png\" width=\"100\">\n</div>\n::: {.callout-note .fragment}\n## Shortcut\n\nYou can also install multiple packages at once using the **function** `c()`:\n\n``` r\ninstall.packages(c(\"readr\", \"dplyr\", \"ggplot2\"))\n```\n\n`c()` stands for **c**ombine or **c**oncatenate.\n:::\n\n## Load Packages {auto-animate=\"true\"}\n\nAfter installation, load the packages into your R session by typing these lines of code into your R Script:\n\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n::: {.callout-note .fragment}\n## You can comment out anything you don't want to run with `#`, this is useful for annotating code or leaving notes to yourself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Libraries\nlibrary(readr) # for reading files\nlibrary(dplyr) # for data manipulation\nlibrary(ggplot2) # for plotting\n```\n:::\n\n:::\n\n::: {.callout-warning .fragment}\n## You cannot combine or concatenate libraries when loading\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(c(readr, dplyr, ggplot2))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(c(readr, dplyr, ggplot2)): 'package' must be of length 1\n```\n\n\n:::\n:::\n\n:::\n\n## Running your Script {.scrollable .nostretch}\n\n![](images/runCode.png){fig-align=\"center\"}\n\n-   You will write your code in the script but it won’t run automatically\n\n    -   You can position your cursor on any line of code in your script and click the Run button and your code will be sent to the console and run.\n\n    -   If you want to run multiple lines, you can highlight a section of code, click Run, and the entire highlighted section will be sent to the console.\n\n    -   You can type code directly into the console, but the code and output is not saved.\n\n## Loading Data {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data file into a new data frame\nkonzaData <- read_csv(\"https://connorb.github.io/data/konza_fqi.csv\")\n```\n:::\n\n\n![](images/loadData.png){fig-align=\"center\" auto-animate=\"true\"}\n\n## What is a Data Frame? {.scrollable .nostretch}\n\nA **data frame** is one of the most common ways to store data in R. Think of it like a **spreadsheet or a table**:\n\n-   Each **row** is an observation (like one student, one site, or one day).\n\n-   Each **column** is a variable (like name, age, or temperature).\n\n![](images/dataframe.png){fig-align=\"center\"}\n\nAlmost every dataset you import into R (CSV, Excel, database) becomes a data frame.\n\nFunctions in R (and packages like [`dplyr`](https://dplyr.tidyverse.org/ \"Click for More Info on dplyr\") and [`ggplot2`](https://ggplot2.tidyverse.org/ \"Click for More Info on ggplot2\")) are designed to work naturally with data frames\n\n## Check Out the Data {auto-animate=\"true\"}\n\n::: r-stack\n![](images/konza_df.png){fig-align=\"center\"}\n\n![](images/konza_view2.png){.fragment fig-align=\"center\"}\n:::\n\n## Check Out the Data {auto-animate=\"true\"}\n\nOr in the console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(konzaData)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [80 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Watershed: chr [1:80] \"004b\" \"004b\" \"004b\" \"004b\" ...\n $ Plot     : chr [1:80] \"a1\" \"a2\" \"a3\" \"a4\" ...\n $ N        : num [1:80] 27 24 23 24 32 26 27 33 26 28 ...\n $ FQI      : num [1:80] 22.9 21.3 20.7 21.9 23.5 ...\n $ D        : num [1:80] 7.98 6.82 5.58 7 8.6 ...\n $ Bison    : chr [1:80] \"No Graze\" \"No Graze\" \"No Graze\" \"No Graze\" ...\n $ BurnCycle: num [1:80] 4 4 4 4 4 4 4 4 4 4 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Watershed = col_character(),\n  ..   Plot = col_character(),\n  ..   N = col_double(),\n  ..   FQI = col_double(),\n  ..   D = col_double(),\n  ..   Bison = col_character(),\n  ..   BurnCycle = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\n## Manipulating Data {auto-animate=\"true\"}\n\nLets calculate the mean and standard deviation of FQI in each bison group\n\n\n::: {.cell class='fragment'}\n\n```{.r .cell-code}\n# Calculate the mean and standard deviation\nkonzaSummary <- konzaData %>% \n  # we want to calculate mean and standard deviation between each group of Bison\n  group_by(Bison) %>% \n  summarise(FQI_Avg = mean(FQI),\n            FQI_sd = sd(FQI),\n            count = n())\n```\n:::\n\n\n::: {.callout-note .fragment}\n## The tidyverse pipe (%\\>%) is a shortcut that makes R code easier to read and write when you want to do multiple steps in a row.\n\n-   `%>%` takes the thing on the **left-hand side** and passes it as the **first argument** to the function on the right-hand side\n\n-   In **RStudio**, the keyboard shortcut for inserting the **tidyverse pipe** (`%>%`) is:\n\n    -   **Windows/Linux**: `Ctrl + Shift + M`\n\n    -   **Mac**: `Cmd + Shift + M`\n:::\n\n## Plotting Data {auto-animate=\"true\"}\n\n\n::: {.cell class='fragment' output-location='fragment'}\n\n```{.r .cell-code}\nkonzaData |>\n  # Set your x and y axis\n  ggplot(aes(x = Bison, y = FQI)) +\n  # What kind of plot do you want to make?\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Intro2RPres_files/figure-revealjs/unnamed-chunk-9-1.png){width=576}\n:::\n:::\n\n\n::: {.callout-note .fragment}\n## In ggplot2, you build a plot in layers.\n\n-   The + is how you add a new layer or element to your plot.\n:::\n[What makes a \"good\" plot?]{.fragment}\n\n## Plotting Data {auto-animate=\"true\"}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nkonzaData |>\n  # Set your x and y axis\n  ggplot(aes(x = Bison, y = FQI)) +\n  # What kind of plot do you want to make?\n  geom_boxplot() +\n  # How do we want to label our plot\n  labs(title = \"Effect of Bison Grazing on FQI\",\n       x = \"Grazing Treatment\",\n       y = \"Floristic Quality Index (FQI)\")\n```\n\n::: {.cell-output-display}\n![](Intro2RPres_files/figure-revealjs/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n[What if we want to add all the observations as points to the boxplot?]{.fragment}\n\n## Plotting Data {auto-animate=\"true\"}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nkonzaData |>\n  # Set your x and y axis\n  ggplot(aes(x = Bison, y = FQI)) +\n  # What kind of plot do you want to make?\n  geom_boxplot() +\n  # How do we want to label our plot\n  labs(title = \"Effect of Bison Grazing on FQI\",\n       x = \"Grazing Treatment\",\n       y = \"Floristic Quality Index (FQI)\") +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](Intro2RPres_files/figure-revealjs/unnamed-chunk-11-1.png){width=576}\n:::\n:::\n\n\n[That works, but some of the observations are duplicated.]{.fragment} [**Hint: Look at the outliers**]{.fragment}\n\n## Plotting Data {auto-animate=\"true\"}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nkonzaData |>\n  # Set your x and y axis\n  ggplot(aes(x = Bison, y = FQI)) +\n  # What kind of plot do you want to make?\n  geom_boxplot(outliers = FALSE) +\n  # How do we want to label our plot\n  labs(title = \"Effect of Bison Grazing on FQI\",\n       x = \"Grazing Treatment\",\n       y = \"Floristic Quality Index (FQI)\") +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](Intro2RPres_files/figure-revealjs/unnamed-chunk-12-1.png){width=576}\n:::\n:::\n\n\n## Saving Your Plot {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkonzaData |>\n  # Set your x and y axis\n  ggplot(aes(x = Bison, y = FQI)) +\n  # What kind of plot do you want to make?\n  geom_boxplot(outliers = FALSE) +\n  # How do we want to label our plot\n  labs(title = \"Effect of Bison Grazing on FQI\",\n       x = \"Grazing Treatment\",\n       y = \"Floristic Quality Index (FQI)\") +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](Intro2RPres_files/figure-revealjs/unnamed-chunk-13-1.png){width=576}\n:::\n\n```{.r .cell-code}\n# Save your plot as a PNG file\nggsave(\"Konza_FQI_Boxplot.png\")\n```\n:::\n\n\n## Saving Your Plot {auto-animate=\"true\"}\n\n![](images/save_plot.png){fig-align=\"center\"}\n\n## Saving Your R Script {auto-animate=\"true\"}\n\n![](images/SaveCode.png){fig-align=\"center\"}\n\n## Learning More {auto-animate=\"true\"}\n\n-   [The Carpentries](https://carpentries.org/)\n\n    -   Teaches foundational coding and data science skills to researchers worldwide, all lessons are published online.\n\n    -   [The Carpentries Workshops \\@ KU](https://lib.ku.edu/carpentries):\n\n        -   [Software Carpentry](https://lib.ku.edu/software-carpentry)\n\n            -   Automate tasks using the Unix Shell, track and share your work using version control, and write software in Python or R that is readable, reusable, and reliable.\n\n        -   [Data Carpentry](https://lib.ku.edu/data-carpentry)\n\n            -   Organize, clean, and query your data using open-source tools. Reproducibly analyze and visualize your data using Python or R.\n\n-   Spring 2026 - EVRN 420: Environmental Data Science W/ Dr. Zimmerman.\n",
    "supporting": [
      "Intro2RPres_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}