---
title: "Publications"
toc: true
number-sections: false
format:
  html:
    section-divs: false   # helps ToC + clean inserted HTML
---

```{r}
#| echo: false

ME_NAME <- "Connor L. Brown"  # <- how to render "me" in authors

# ---- Load YAML ----
library(yaml)

# Normalize to a list of entries with convenience fields
normalize_entry <- function(key, e) {
  esc <- function(x) {
    if (is.null(x)) return("")
    x <- as.character(x)
    x <- gsub("&", "&amp;", x, fixed = TRUE)
    x <- gsub("<", "&lt;",  x, fixed = TRUE)
    x <- gsub(">", "&gt;",  x, fixed = TRUE)
    x
  }

  # authors with "me"
  authors <- e$authors
  if (is.null(authors)) authors <- character(0)
  authors_html <- vapply(
    authors,
    function(a) {
      a_chr <- as.character(a)
      if (tolower(trimws(a_chr)) == "me") sprintf("<strong>%s</strong>", esc(ME_NAME)) else esc(a_chr)
    },
    character(1)
  ) |> paste(collapse = ", ")

  # year from year or date
  to_year <- function(d) {
    y <- suppressWarnings(as.integer(format(as.Date(d), "%Y")))
    if (is.na(y)) NA_integer_ else y
  }
  yr <- if (!is.null(e$year)) as.integer(e$year)
        else if (!is.null(e$date)) to_year(e$date)
        else NA_integer_

  # detect "published" from fields OR links (DOI/Published)
  has_pub_field <- !is.null(e$published_url) || !is.null(e$doi)
  has_pub_link <- FALSE
  if (!is.null(e$links) && length(e$links)) {
    has_pub_link <- any(vapply(
      e$links,
      function(li) {
        txt <- tolower(as.character(li$text %||% ""))
        href <- as.character(li$href %||% "")
        grepl("^https?://doi\\.org/", href) || txt %in% c("published","journal","publisher","doi")
      },
      logical(1)
    ))
  }

  list(
    .key = key,
    title = e$title,
    authors_html = authors_html,
    venue = e$venue,
    year = yr,
    status = e$status,
    doi = e$doi,
    published_url = e$published_url,
    preprint = e$preprint,
    pdf = e$pdf,
    code = e$code,
    data = e$data,
    links = e$links,              # keep generic links for rendering
    .is_published = (has_pub_field || has_pub_link)
  )
}

raw <- yaml::read_yaml("publications.yaml")
if (is.null(raw)) raw <- list()
items <- if (length(raw)) {
  idx <- seq_along(raw)
  lapply(idx, function(i) normalize_entry(as.character(i), raw[[i]]))
} else list()

# Split by published vs working
published <- Filter(function(x) isTRUE(x$.is_published), items)
working   <- Filter(function(x) !isTRUE(x$.is_published), items)

# Sort (newest year first, then title)
`%||%` <- function(x, y) if (is.null(x)) y else x

sort_entries <- function(xs) {
  if (!length(xs)) return(xs)
  # extract vectors
  year_vec  <- vapply(xs, function(z) z$year %||% NA_integer_, integer(1))
  title_vec <- vapply(xs, function(z) z$title %||% "", character(1))
  # sort newest first by using negative years; push missing years to the end
  year_safe <- ifelse(is.na(year_vec), -Inf, year_vec)
  ord <- order(-year_safe, tolower(title_vec), na.last = TRUE)
  xs[ord]
}

published <- sort_entries(published)
working   <- sort_entries(working)

# Group by year
split_by_year <- function(xs) {
  if (!length(xs)) return(list(years = integer(0), groups = list()))
  yrs <- vapply(xs, function(z) ifelse(is.na(z$year), NA_integer_, z$year), integer(1))
  # Put NA years at the end as "Unknown"
  known_idx <- which(!is.na(yrs))
  years <- sort(unique(yrs[known_idx]), decreasing = TRUE)
  groups <- lapply(years, function(y) Filter(function(x) identical(x$year, y), xs))
  # Handle NA group if present
  if (any(is.na(yrs))) {
    years <- c(years, NA_integer_)
    groups <- c(groups, list(Filter(function(x) is.na(x$year), xs)))
  }
  list(years = years, groups = groups)
}

pub_grp <- split_by_year(published)
wrk_grp <- split_by_year(working)

# HTML helpers
btn <- function(label, href, style = "secondary") {
  if (is.null(href) || identical(href, "")) return("")
  sprintf(
    '<a class="btn btn-sm btn-outline-%s me-2" href="%s" target="_blank" rel="noopener">%s</a>',
    style, href, label
  )
}

render_entry <- function(e) {
  esc <- function(x) {
    if (is.null(x)) return("")
    x <- as.character(x)
    x <- gsub("&", "&amp;", x, fixed = TRUE)
    x <- gsub("<", "&lt;",  x, fixed = TRUE)
    x <- gsub(">", "&gt;",  x, fixed = TRUE)
    x
  }
  title  <- esc(e$title %||% "Untitled")
  venue  <- esc(e$venue %||% "")
  year   <- e$year
  status <- esc(e$status %||% "")
  authors_html <- e$authors_html %||% ""

  # Specific fields first
  links <- character()
  if (!is.null(e$doi) && nzchar(e$doi))               links <- c(links, btn("DOI", paste0("https://doi.org/", e$doi)))
  if (!is.null(e$published_url) && nzchar(e$published_url)) links <- c(links, btn("Published", e$published_url, "primary"))
  if (!is.null(e$preprint) && nzchar(e$preprint))     links <- c(links, btn("Preprint", e$preprint, "dark"))
  if (!is.null(e$pdf) && nzchar(e$pdf))               links <- c(links, btn("PDF", e$pdf))
  if (!is.null(e$code) && nzchar(e$code))             links <- c(links, btn("Code", e$code, "success"))
  if (!is.null(e$data) && nzchar(e$data))             links <- c(links, btn("Data", e$data, "info"))

  # Then generic links from YAML (styled by common labels)
  if (!is.null(e$links) && length(e$links)) {
    map_style <- function(lbl) {
      lbl_l <- tolower(lbl)
      if (lbl_l %in% c("published","journal","publisher")) "primary"
      else if (lbl_l %in% c("preprint")) "dark"
      else if (lbl_l %in% c("code","software","github")) "success"
      else if (lbl_l %in% c("data","dataset")) "info"
      else "secondary"
    }
    gen <- vapply(e$links, function(li) {
      lbl <- as.character(li$text %||% "")
      href <- as.character(li$href %||% "")
      btn(lbl, href, map_style(lbl))
    }, character(1))
    links <- c(links, gen)
  }
  links_html <- paste(links[links != ""], collapse = "")

  parts <- character()
  if (nzchar(venue)) parts <- c(parts, venue)
  if (!is.na(year))  parts <- c(parts, as.character(year))
  if (nzchar(status)) parts <- c(parts, status)
  secondary <- paste(parts, collapse = " â€¢ ")

  sprintf('
<div class="mb-4 pb-3 border-bottom">
  <div class="h5 mb-1">%s</div>
  <div class="text-muted mb-1">%s</div>
  <div class="text-muted mb-2"><em>%s</em></div>
  <div>%s</div>
</div>
', title, authors_html, secondary, links_html)
}


`%||%` <- function(x, y) if (is.null(x)) y else x

# Compose section HTML (with real H2 headings so they appear in ToC)
compose_section <- function(grp, empty_msg) {
  if (!length(grp$years)) return(sprintf("<p>%s</p>", empty_msg))
  out <- character()
  for (i in seq_along(grp$years)) {
    y <- grp$years[[i]]
    entries <- grp$groups[[i]]

    # Only add a heading if year is not NA
    if (!is.na(y)) {
      out <- c(out, sprintf("<h2>%s</h2>", as.character(y)))
    }

    for (e in entries) {
      out <- c(out, render_entry(e))
    }
  }
  paste(out, collapse = "\n")
}

PUB_HTML <- compose_section(pub_grp, "No published work yet.")
WRK_HTML <- compose_section(wrk_grp, "No working papers listed.")
```
## Published
```{r}
#| echo: false
#| results: asis
cat(PUB_HTML)

```

## In-Prep
```{r}
#| echo: false
#| results: asis
cat(WRK_HTML)

```

